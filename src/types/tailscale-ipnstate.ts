// Code generated by tygo. DO NOT EDIT.

//////////
// source: ipnstate.go
/*
Package ipnstate captures the entire state of the Tailscale network.

It's a leaf package so ipn, wgengine, and magicsock can all depend on it.
*/

/**
 * Status represents the entire state of the IPN network.
 */
export interface Status {
  /**
   * Version is the daemon's long version (see version.Long).
   */
  Version: string;
  /**
   * TUN is whether /dev/net/tun (or equivalent kernel interface) is being
   * used. If false, it's running in userspace mode.
   */
  TUN: boolean;
  /**
   * BackendState is an ipn.State string value:
   *  "NoState", "NeedsLogin", "NeedsMachineAuth", "Stopped",
   *  "Starting", "Running".
   */
  BackendState: string;
  /**
   * HaveNodeKey is whether the current profile has a node key configured.
   */
  HaveNodeKey?: boolean;
  AuthURL: string; // current URL provided by control to authorize client
  TailscaleIPs: any /* netip.Addr */[]; // Tailscale IP(s) assigned to this node
  Self?: PeerStatus;
  /**
   * ExitNodeStatus describes the current exit node.
   * If nil, an exit node is not in use.
   */
  ExitNodeStatus?: ExitNodeStatus;
  /**
   * Health contains health check problems.
   * Empty means everything is good. (or at least that no known
   * problems are detected)
   */
  Health: string[];
  /**
   * This field is the legacy name of CurrentTailnet.MagicDNSSuffix.
   * Deprecated: use CurrentTailnet.MagicDNSSuffix instead.
   */
  MagicDNSSuffix: string;
  /**
   * CurrentTailnet is information about the tailnet that the node
   * is currently connected to. When not connected, this field is nil.
   */
  CurrentTailnet?: TailnetStatus;
  /**
   * CertDomains are the set of DNS names for which the control
   * plane server will assist with provisioning TLS
   * certificates. See SetDNSRequest for dns-01 ACME challenges
   * for e.g. LetsEncrypt. These names are FQDNs without
   * trailing periods, and without any "_acme-challenge." prefix.
   */
  CertDomains: string[];
  /**
   * Peer is the state of each peer, keyed by each peer's current public key.
   */
  Peer: { [key: any /* key.NodePublic */]: PeerStatus | undefined};
  /**
   * User contains profile information about UserIDs referenced by
   * PeerStatus.UserID, PeerStatus.AltSharerUserID, etc.
   */
  User: { [key: any /* tailcfg.UserID */]: any /* tailcfg.UserProfile */};
  /**
   * ClientVersion, when non-nil, contains information about the latest
   * version of the Tailscale client that's available. Depending on
   * the platform and client settings, it may not be available.
   */
  ClientVersion?: any /* tailcfg.ClientVersion */;
}
/**
 * TKAKey describes a key trusted by network lock.
 */
export interface TKAKey {
  Key: any /* key.NLPublic */;
  Metadata: { [key: string]: string};
  Votes: number /* uint */;
}
/**
 * TKAPeer describes a peer and its network lock details.
 */
export interface TKAPeer {
  Name: string; // DNS
  ID: any /* tailcfg.NodeID */;
  StableID: any /* tailcfg.StableNodeID */;
  TailscaleIPs: any /* netip.Addr */[]; // Tailscale IP(s) assigned to this node
  NodeKey: any /* key.NodePublic */;
  NodeKeySignature: any /* tka.NodeKeySignature */;
}
/**
 * NetworkLockStatus represents whether network-lock is enabled,
 * along with details about the locally-known state of the tailnet
 * key authority.
 */
export interface NetworkLockStatus {
  /**
   * Enabled is true if network lock is enabled.
   */
  Enabled: boolean;
  /**
   * Head describes the AUM hash of the leaf AUM. Head is nil
   * if network lock is not enabled.
   */
  Head?: string;
  /**
   * PublicKey describes the node's network-lock public key.
   * It may be zero if the node has not logged in.
   */
  PublicKey: any /* key.NLPublic */;
  /**
   * NodeKey describes the node's current node-key. This field is not
   * populated if the node is not operating (i.e. waiting for a login).
   */
  NodeKey?: any /* key.NodePublic */;
  /**
   * NodeKeySigned is true if our node is authorized by network-lock.
   */
  NodeKeySigned: boolean;
  /**
   * NodeKeySignature is the current signature of this node's key.
   */
  NodeKeySignature?: any /* tka.NodeKeySignature */;
  /**
   * TrustedKeys describes the keys currently trusted to make changes
   * to network-lock.
   */
  TrustedKeys: TKAKey[];
  /**
   * VisiblePeers describes peers which are visible in the netmap that
   * have valid Tailnet Lock signatures signatures.
   */
  VisiblePeers: (TKAPeer | undefined)[];
  /**
   * FilteredPeers describes peers which were removed from the netmap
   * (i.e. no connectivity) because they failed tailnet lock
   * checks.
   */
  FilteredPeers: (TKAPeer | undefined)[];
  /**
   * StateID is a nonce associated with the network lock authority,
   * generated upon enablement. This field is not populated if the
   * network lock is disabled.
   */
  StateID: number /* uint64 */;
}
/**
 * NetworkLockUpdate describes a change to network-lock state.
 */
export interface NetworkLockUpdate {
  Hash: string;
  Change: string; // values of tka.AUMKind.String()
  /**
   * Raw contains the serialized AUM. The AUM is sent in serialized
   * form to avoid transitive dependences bloating this package.
   */
  Raw: string;
}
/**
 * TailnetStatus is information about a Tailscale network ("tailnet").
 */
export interface TailnetStatus {
  /**
   * Name is the name of the network that's currently in use.
   */
  Name: string;
  /**
   * MagicDNSSuffix is the network's MagicDNS suffix for nodes
   * in the network such as "userfoo.tailscale.net".
   * There are no surrounding dots.
   * MagicDNSSuffix should be populated regardless of whether a domain
   * has MagicDNS enabled.
   */
  MagicDNSSuffix: string;
  /**
   * MagicDNSEnabled is whether or not the network has MagicDNS enabled.
   * Note that the current device may still not support MagicDNS if
   * `--accept-dns=false` was used.
   */
  MagicDNSEnabled: boolean;
}
/**
 * ExitNodeStatus describes the current exit node.
 */
export interface ExitNodeStatus {
  /**
   * ID is the exit node's ID.
   */
  ID: any /* tailcfg.StableNodeID */;
  /**
   * Online is whether the exit node is alive.
   */
  Online: boolean;
  /**
   * TailscaleIPs are the exit node's IP addresses assigned to the node.
   */
  TailscaleIPs: any /* netip.Prefix */[];
}
export interface PeerStatusLite {
  /**
   * NodeKey is this peer's public node key.
   */
  NodeKey: any /* key.NodePublic */;
  /**
   * TxBytes/RxBytes are the total number of bytes transmitted to/received
   * from this peer.
   */
  TxBytes: number /* int64 */;
  /**
   * LastHandshake is the last time a handshake succeeded with this peer. (Or
   * we got key confirmation via the first data message, which is
   * approximately the same thing.)
   * The time.Time zero value means that no handshake has succeeded, at least
   * since this peer was last known to WireGuard. (Tailscale removes peers
   * from the wireguard peer that are idle.)
   */
  LastHandshake: any /* time.Time */;
}
/**
 * PeerStatus describes a peer node and its current state.
 * WARNING: The fields in PeerStatus are merged by the AddPeer method in the StatusBuilder.
 * When adding a new field to PeerStatus, you must update AddPeer to handle merging
 * the new field. The AddPeer function is responsible for combining multiple updates
 * to the same peer, and any new field that is not merged properly may lead to
 * inconsistencies or lost data in the peer status.
 */
export interface PeerStatus {
  ID: any /* tailcfg.StableNodeID */;
  PublicKey: any /* key.NodePublic */;
  HostName: string; // HostInfo's Hostname (not a DNS name or necessarily unique)
  /**
   * DNSName is the Peer's FQDN. It ends with a dot.
   * It has the form "host.<MagicDNSSuffix>."
   */
  DNSName: string;
  OS: string; // HostInfo.OS
  UserID: any /* tailcfg.UserID */;
  /**
   * AltSharerUserID is the user who shared this node
   * if it's different than UserID. Otherwise it's zero.
   */
  AltSharerUserID?: any /* tailcfg.UserID */;
  /**
   * TailscaleIPs are the IP addresses assigned to the node.
   */
  TailscaleIPs: any /* netip.Addr */[];
  /**
   * AllowedIPs are IP addresses allowed to route to this node.
   */
  AllowedIPs?: any /* views.Slice */<any /* netip.Prefix */>;
  /**
   * Tags are the list of ACL tags applied to this node.
   * See tailscale.com/tailcfg#Node.Tags for more information.
   */
  Tags?: any /* views.Slice */<string>;
  /**
   * PrimaryRoutes are the routes this node is currently the primary
   * subnet router for, as determined by the control plane. It does
   * not include the IPs in TailscaleIPs.
   */
  PrimaryRoutes?: any /* views.Slice */<any /* netip.Prefix */>;
  /**
   * Endpoints:
   */
  Addrs: string[];
  CurAddr: string; // one of Addrs, or unique if roaming
  Relay: string; // DERP region
  PeerRelay: string; // peer relay address (ip:port:vni)
  RxBytes: number /* int64 */;
  TxBytes: number /* int64 */;
  Created: any /* time.Time */; // time registered with tailcontrol
  LastWrite: any /* time.Time */; // time last packet sent
  LastSeen: any /* time.Time */; // last seen to tailcontrol; only present if offline
  LastHandshake: any /* time.Time */; // with local wireguard
  Online: boolean; // whether node is connected to the control plane
  ExitNode: boolean; // true if this is the currently selected exit node.
  ExitNodeOption: boolean; // true if this node can be an exit node (offered && approved)
  /**
   * Active is whether the node was recently active. The
   * definition is somewhat undefined but has historically and
   * currently means that there was some packet sent to this
   * peer in the past two minutes. That definition is subject to
   * change.
   */
  Active: boolean;
  /**
   * PeerAPIURL are the URLs of the node's PeerAPI servers.
   */
  PeerAPIURL: string[];
  /**
   * TaildropTargetStatus represents the node's eligibility to have files shared to it.
   */
  TaildropTarget: TaildropTargetStatus;
  /**
   * Reason why this peer cannot receive files. Empty if CanReceiveFiles=true
   */
  NoFileSharingReason: string;
  /**
   * Capabilities are capabilities that the node has.
   * They're free-form strings, but should be in the form of URLs/URIs
   * such as:
   *    "https://tailscale.com/cap/is-admin"
   *    "https://tailscale.com/cap/file-sharing"
   *    "funnel"
   * Deprecated: use CapMap instead. See https://github.com/tailscale/tailscale/issues/11508
   * Every value is Capabilities is also a key in CapMap, even if it
   * has no values in that map.
   */
  Capabilities?: any /* tailcfg.NodeCapability */[];
  /**
   * CapMap is a map of capabilities to their values.
   */
  CapMap?: any /* tailcfg.NodeCapMap */;
  /**
   * SSH_HostKeys are the node's SSH host keys, if known.
   */
  sshHostKeys?: string[];
  /**
   * ShareeNode indicates this node exists in the netmap because
   * it's owned by a shared-to user and that node might connect
   * to us. These nodes should be hidden by "tailscale status"
   * etc by default.
   */
  ShareeNode?: boolean;
  /**
   * InNetworkMap means that this peer was seen in our latest network map.
   * In theory, all of InNetworkMap and InMagicSock and InEngine should all be true.
   */
  InNetworkMap: boolean;
  /**
   * InMagicSock means that this peer is being tracked by magicsock.
   * In theory, all of InNetworkMap and InMagicSock and InEngine should all be true.
   */
  InMagicSock: boolean;
  /**
   * InEngine means that this peer is tracked by the wireguard engine.
   * In theory, all of InNetworkMap and InMagicSock and InEngine should all be true.
   */
  InEngine: boolean;
  /**
   * Expired means that this peer's node key has expired, based on either
   * information from control or optimisically set on the client if the
   * expiration time has passed.
   */
  Expired?: boolean;
  /**
   * KeyExpiry, if present, is the time at which the node key expired or
   * will expire.
   */
  KeyExpiry?: any /* time.Time */;
  Location?: any /* tailcfg.Location */;
}
export type TaildropTargetStatus = number /* int */;
export const TaildropTargetUnknown: TaildropTargetStatus = 0;
export const TaildropTargetAvailable: TaildropTargetStatus = 1;
export const TaildropTargetNoNetmapAvailable: TaildropTargetStatus = 2;
export const TaildropTargetIpnStateNotRunning: TaildropTargetStatus = 3;
export const TaildropTargetMissingCap: TaildropTargetStatus = 4;
export const TaildropTargetOffline: TaildropTargetStatus = 5;
export const TaildropTargetNoPeerInfo: TaildropTargetStatus = 6;
export const TaildropTargetUnsupportedOS: TaildropTargetStatus = 7;
export const TaildropTargetNoPeerAPI: TaildropTargetStatus = 8;
export const TaildropTargetOwnedByOtherUser: TaildropTargetStatus = 9;
/**
 * StatusBuilder is a request to construct a Status. A new StatusBuilder is
 * passed to various subsystems which then call methods on it to populate state.
 * Call its Status method to return the final constructed Status.
 */
export interface StatusBuilder {
  WantPeers: boolean; // whether caller wants peers
}
export type StatusUpdater = any;
/**
 * PingResult contains response information for the "tailscale ping" subcommand,
 * saying how Tailscale can reach a Tailscale IP or subnet-routed IP.
 * See tailcfg.PingResponse for a related response that is sent back to control
 * for remote diagnostic pings.
 */
export interface PingResult {
  IP: string; // ping destination
  NodeIP: string; // Tailscale IP of node handling IP (different for subnet routers)
  NodeName: string; // DNS name base or (possibly not unique) hostname
  Err: string;
  LatencySeconds: number /* float64 */;
  /**
   * Endpoint is a string of the form "{ip}:{port}" if direct UDP was used. It
   * is not currently set for TSMP.
   */
  Endpoint: string;
  /**
   * PeerRelay is a string of the form "{ip}:{port}:vni:{vni}" if a peer
   * relay was used. It is not currently set for TSMP. Note that this field
   * is not omitted during JSON encoding if it contains a zero value. This is
   * done for consistency with the Endpoint field; this structure is exposed
   * externally via localAPI, so we want to maintain the existing convention.
   */
  PeerRelay: string;
  /**
   * DERPRegionID is non-zero DERP region ID if DERP was used.
   * It is not currently set for TSMP pings.
   */
  DERPRegionID: number /* int */;
  /**
   * DERPRegionCode is the three-letter region code
   * corresponding to DERPRegionID.
   * It is not currently set for TSMP pings.
   */
  DERPRegionCode: string;
  /**
   * PeerAPIPort is set by TSMP ping responses for peers that
   * are running a peerapi server. This is the port they're
   * running the server on.
   */
  PeerAPIPort?: number /* uint16 */;
  /**
   * PeerAPIURL is the URL that was hit for pings of type "peerapi" (tailcfg.PingPeerAPI).
   * It's of the form "http://ip:port" (or [ip]:port for IPv6).
   */
  PeerAPIURL?: string;
  /**
   * IsLocalIP is whether the ping request error is due to it being
   * a ping to the local node.
   */
  IsLocalIP?: boolean;
}
/**
 * DebugDERPRegionReport is the result of a "tailscale debug derp" command,
 * to let people debug a custom DERP setup.
 */
export interface DebugDERPRegionReport {
  Info: string[];
  Warnings: string[];
  Errors: string[];
}
export type SelfUpdateStatus = string;
export const UpdateFinished: SelfUpdateStatus = "UpdateFinished";
export const UpdateInProgress: SelfUpdateStatus = "UpdateInProgress";
export const UpdateFailed: SelfUpdateStatus = "UpdateFailed";
export interface UpdateProgress {
  status?: SelfUpdateStatus;
  message?: string;
  version?: string;
}
